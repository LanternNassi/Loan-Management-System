// <auto-generated />
using System;
using Loan_Management_System.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Loan_Management_System.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20240625124954_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Loan_Management_System.Models.ClientX.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NIN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OtherNames")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Loan_Management_System.Models.LoanApplicationX.LoanApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Approved_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("Approved_by")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("LoanAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Approved_by");

                    b.HasIndex("ClientId");

                    b.ToTable("LoanApplications");
                });

            modelBuilder.Entity("Loan_Management_System.Models.LoanDisbursmentX.LoanDisbursment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DisbursedBy")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("DisbursmentAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DisbursmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MoreInfo")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("loanId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DisbursedBy");

                    b.HasIndex("loanId");

                    b.ToTable("LoanDisbursments");
                });

            modelBuilder.Entity("Loan_Management_System.Models.LoanX.Loan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Application")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("InterestRate")
                        .HasColumnType("numeric");

                    b.Property<decimal>("LoanAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("OutStandingBalance")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Application");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("Loan_Management_System.Models.RepaymentScheduleX.RepaymentSchedule", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("RepaymentAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("RepaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("loanId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("loanId");

                    b.ToTable("RepaymentSchedules");
                });

            modelBuilder.Entity("Loan_Management_System.Models.RepaymentsX.Repayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MoreInfo")
                        .HasColumnType("text");

                    b.Property<Guid>("Schedule")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Schedule");

                    b.ToTable("Repayments");
                });

            modelBuilder.Entity("Loan_Management_System.Models.UserX.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Loan_Management_System.Models.LoanApplicationX.LoanApplication", b =>
                {
                    b.HasOne("Loan_Management_System.Models.UserX.User", "User")
                        .WithMany()
                        .HasForeignKey("Approved_by");

                    b.HasOne("Loan_Management_System.Models.ClientX.Client", "Client")
                        .WithMany("LoanApplications")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Loan_Management_System.Models.LoanDisbursmentX.LoanDisbursment", b =>
                {
                    b.HasOne("Loan_Management_System.Models.UserX.User", "User")
                        .WithMany()
                        .HasForeignKey("DisbursedBy");

                    b.HasOne("Loan_Management_System.Models.LoanX.Loan", "Loan")
                        .WithMany()
                        .HasForeignKey("loanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Loan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Loan_Management_System.Models.LoanX.Loan", b =>
                {
                    b.HasOne("Loan_Management_System.Models.LoanApplicationX.LoanApplication", "LoanApplication")
                        .WithMany()
                        .HasForeignKey("Application")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanApplication");
                });

            modelBuilder.Entity("Loan_Management_System.Models.RepaymentScheduleX.RepaymentSchedule", b =>
                {
                    b.HasOne("Loan_Management_System.Models.LoanX.Loan", "Loan")
                        .WithMany()
                        .HasForeignKey("loanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Loan");
                });

            modelBuilder.Entity("Loan_Management_System.Models.RepaymentsX.Repayment", b =>
                {
                    b.HasOne("Loan_Management_System.Models.RepaymentScheduleX.RepaymentSchedule", "RepaymentSchedule")
                        .WithMany()
                        .HasForeignKey("Schedule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RepaymentSchedule");
                });

            modelBuilder.Entity("Loan_Management_System.Models.ClientX.Client", b =>
                {
                    b.Navigation("LoanApplications");
                });
#pragma warning restore 612, 618
        }
    }
}
